/*
 * This file was generated by the Gradle 'init' task.
 */


plugins {
    id 'maven-publish'
    id 'signing'
    id 'info.solidsoft.pitest' version "${pitestPluginVersion}"
    id "ca.coglinc.javacc" version "${caCoglincJavaccPluginVersion}"
}

configurations {
   calciteParserTemplate { transitive = false }
   fmpp
}

dependencies {
    javacc "net.java.dev.javacc:javacc:${javaCCVersion}"
    calciteParserTemplate "org.apache.calcite:calcite-core:${calciteCoreVersion}"
    fmpp "com.googlecode.fmpp-maven-plugin:fmpp-maven-plugin:${fmppMavenPluginVersion}"
    fmpp "org.freemarker:freemarker:${freemarkerVersion}"
    implementation ("org.apache.calcite:calcite-core:${calciteCoreVersion}") {
        exclude group: "org.apache.httpcomponents"
        exclude group: "org.apache.logging"
        exclude group: "org.yaml"
        exclude group: "com.fasterxml.jackson.core"
        exclude group: "net.minidev"
        exclude group: "com.yahoo.datasketches"
        exclude group: "org.codehaus.janino"
        exclude group: "com.google.guava"
        exclude group: "com.google.protobuf"
    }
    implementation "org.freemarker:freemarker:${freemarkerVersion}"
    implementation ("com.facebook.presto:presto-parser:${prestoParserVersion}") {
        exclude group: "com.google.guava"
    }
    implementation "com.squareup:javapoet:${javapoetVersion}"
    implementation "com.google.ortools:ortools-java:${orToolsVersion}"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    testImplementation "com.h2database:h2:${h2Version}"
    implementation ("org.apache.calcite:calcite-server:${calciteCoreVersion}")
}

pitest {
    //adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
    junit5PluginVersion = '0.14'
    targetTests = ["*ModelTest*"]
}

// Make sure the core DCM library is always built using an older JDK. We are free to use
// newer JDKs in the rest of the code base.
java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(Integer.parseInt("${dcmLibrarySourceLevel}"))
    }
}

tasks.withType(JavaCompile) {
    options.release.set(Integer.parseInt("${dcmLibrarySourceLevel}"))
}

javadoc {
    exclude '**/com/vmware/dcm/generated/parser/ParseException**'
    exclude '**/com/vmware/dcm/generated/parser/DcmSqlParserImpl**'
}

publishing {
    repositories {
        maven {
            name = "Sonatype"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = project.findProperty("ossrhUsername")
                password = project.findProperty("ossrhPassword")
            }
        }
    }
    
    publications {
        maven(MavenPublication) {
            from(components.java)

            groupId = "${dcmGroupId}"
            artifactId = "${dcmArtifactId}"
            version = "${dcmVersion}"

            pom {
                name = "Declarative Cluster Management (DCM) Library"
                url = "https://github.com/vmware/declarative-cluster-management/"
                description = "Library for building declarative cluster managers. Please refer to the README at github.com/vmware/declarative-cluster-management/ for instructions on setting up solvers before use."

                developers {
                    developer {
                        id = "lalithsuresh"
                        name = "Lalith Suresh"
                        email = "lsuresh@vmware.com"
                        url = "https://github.com/lalithsuresh"
                    }
                }

                scm {
                    connection = "scm:git:https://github.com/vmware/declarative-cluster-management.git"
                    developerConnection = "scm:git:git@github.com:vmware/declarative-cluster-management.git"
                    url = "https://github.com/vmware/declarative-cluster-management/"
                }

                licenses {
                    license {
                        name = "The BSD-2 license"
                        url = "https://opensource.org/licenses/BSD-2-Clause"
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}

//
// The rest of this file is used for the Calcite parser extensions' codegen
//
// The workflow is:
//  1) extract Calcite fmpp templates into a folder
//  2) extract DCM's fmpp templates into that folder
//  3) Run FMPP ant task to turn fmpp templates into JavaCC source files
//  4) Run JavaCC
//
def fmppTemplatesFolder = "${buildDir}/templates-fmpp"
def generatedFmppFolder = "${buildDir}/generated/fmpp"
def generatedFmppJavaccFolder = "${generatedFmppFolder}/javacc"
def generatedJavaccFolder = "${buildDir}/generated/javacc"
def javaccOutputDir = "${generatedJavaccFolder}/com/vmware/dcm/generated/parser"

//  1) extract Calcite fmpp templates into a folder
task extractCalciteParserTemplate(type: Copy) {
    dependsOn configurations.calciteParserTemplate
    from {
        configurations.calciteParserTemplate.collect {
            zipTree(it)
        }
    }
    into(fmppTemplatesFolder)
    eachFile { fcp ->
        if (!fcp.path.toString().startsWith("codegen")) {
            fcp.exclude()
        }
    }
    includeEmptyDirs false
}

//  2) extract DCM's fmpp templates into that folder
task extractDcmFmppTemplates(type: Copy) {
    from "$projectDir/src/main/codegen"
    into "$fmppTemplatesFolder/codegen/"
}

//  3) Run FMPP to generate javacc source files from the fmpp templates
task generateFmppSources {
    dependsOn configurations.fmpp
    dependsOn extractDcmFmppTemplates
    dependsOn extractCalciteParserTemplate
    doLast {
        ant.taskdef(name: "fmpp", classname: "fmpp.tools.AntTask", classpath: configurations.fmpp.asPath)
        // Configuration info from http://fmpp.sourceforge.net/ant.html
        ant.fmpp(configuration: "$fmppTemplatesFolder/codegen/config.fmpp",
                 sourceRoot: "$fmppTemplatesFolder/codegen/templates",
                 // It's crucial to add the default_config.fmpp here. Otherwise, we'll need to duplicate
                 // everything that is in the Calcite FMPP file
                 data: "tdd($fmppTemplatesFolder/codegen/config.fmpp), " +
                       "default: tdd($fmppTemplatesFolder/codegen/default_config.fmpp)",
                 outputRoot: generatedFmppFolder)
    }
}

compileJava.dependsOn(generateFmppSources)

//  4) Run JavaCC
compileJavacc {
    dependsOn generateFmppSources
    inputDirectory = file(generatedFmppJavaccFolder)
    outputDirectory = file(javaccOutputDir)
    arguments = [static: "false", lookahead: "2"]
}

// Add the generated files to source sets so IDEA doesn't complain
sourceSets.main.java.srcDirs += generatedJavaccFolder
sourcesJar.dependsOn(compileJavacc)
